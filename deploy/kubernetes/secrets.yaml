apiVersion: v1
kind: Secret
metadata:
  name: ml-pipeline-secrets
  namespace: ml-pipeline
  labels:
    app: ml-pipeline-framework
    component: secrets
type: Opaque
data:
  # Database credentials (base64 encoded)
  db_user: bWx1c2Vy  # mluser
  db_password: bWxwYXNzd29yZA==  # mlpassword
  
  # MLflow credentials
  mlflow_username: YWRtaW4=  # admin
  mlflow_password: YWRtaW4xMjM=  # admin123
  
  # S3/MinIO credentials
  aws_access_key_id: bWluaW9hZG1pbg==  # minioadmin
  aws_secret_access_key: bWluaW9hZG1pbjEyMw==  # minioadmin123
  
  # API keys (replace with actual values)
  openai_api_key: ""
  huggingface_token: ""
  
  # SSL certificates (if needed)
  tls_cert: ""
  tls_key: ""

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: ml-pipeline
  labels:
    app: postgres
type: Opaque
data:
  postgres_db: bWxwaXBlbGluZQ==  # mlpipeline
  postgres_user: bWx1c2Vy  # mluser
  postgres_password: bWxwYXNzd29yZA==  # mlpassword

---
apiVersion: v1
kind: Secret
metadata:
  name: minio-secret
  namespace: ml-pipeline
  labels:
    app: minio
type: Opaque
data:
  root_user: bWluaW9hZG1pbg==  # minioadmin
  root_password: bWluaW9hZG1pbjEyMw==  # minioadmin123

---
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: ml-pipeline
  labels:
    app: ml-pipeline-framework
type: kubernetes.io/dockerconfigjson
data:
  # Docker registry credentials for private registries
  # Replace with actual registry credentials
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5leGFtcGxlLmNvbSI6eyJ1c2VybmFtZSI6InVzZXIiLCJwYXNzd29yZCI6InBhc3N3b3JkIiwiYXV0aCI6ImRYTmxjanB3WVhOemQyOXlaQT09In19fQ==

---
# Service account for Spark driver
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spark-driver
  namespace: ml-pipeline
  labels:
    app: ml-pipeline-framework
    component: spark
imagePullSecrets:
  - name: registry-secret

---
# Service account for ML Pipeline application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ml-pipeline-app
  namespace: ml-pipeline
  labels:
    app: ml-pipeline-framework
    component: application
imagePullSecrets:
  - name: registry-secret

---
# Role for Spark operations
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ml-pipeline
  name: spark-role
  labels:
    app: ml-pipeline-framework
    component: spark
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["*"]

---
# Role binding for Spark
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: spark-role-binding
  namespace: ml-pipeline
  labels:
    app: ml-pipeline-framework
    component: spark
subjects:
- kind: ServiceAccount
  name: spark-driver
  namespace: ml-pipeline
roleRef:
  kind: Role
  name: spark-role
  apiGroup: rbac.authorization.k8s.io

---
# Role for ML Pipeline application
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ml-pipeline
  name: ml-pipeline-role
  labels:
    app: ml-pipeline-framework
    component: application
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list", "create", "delete"]

---
# Role binding for ML Pipeline application
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ml-pipeline-role-binding
  namespace: ml-pipeline
  labels:
    app: ml-pipeline-framework
    component: application
subjects:
- kind: ServiceAccount
  name: ml-pipeline-app
  namespace: ml-pipeline
roleRef:
  kind: Role
  name: ml-pipeline-role
  apiGroup: rbac.authorization.k8s.io

---
# Network policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ml-pipeline-network-policy
  namespace: ml-pipeline
  labels:
    app: ml-pipeline-framework
spec:
  podSelector:
    matchLabels:
      app: ml-pipeline-framework
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ml-pipeline
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 4040
    - protocol: TCP
      port: 8888
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - namespaceSelector:
        matchLabels:
          name: ml-pipeline
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80