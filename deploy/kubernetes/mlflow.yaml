apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow
  namespace: ml-pipeline
  labels:
    app: mlflow
    component: tracking
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mlflow
  template:
    metadata:
      labels:
        app: mlflow
        component: tracking
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:14
        command:
        - /bin/bash
        - -c
        - |
          until pg_isready -h postgres-service -p 5432 -U mluser; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
        env:
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres_user
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres_password
      containers:
      - name: mlflow
        image: python:3.9-slim
        ports:
        - containerPort: 5000
          name: http
        env:
        - name: MLFLOW_BACKEND_STORE_URI
          value: "postgresql://mluser:mlpassword@postgres-service:5432/mlflow"
        - name: MLFLOW_DEFAULT_ARTIFACT_ROOT
          value: "/mlflow/artifacts"
        - name: MLFLOW_HOST
          value: "0.0.0.0"
        - name: MLFLOW_PORT
          value: "5000"
        command:
        - /bin/bash
        - -c
        - |
          pip install mlflow psycopg2-binary boto3 azure-storage-blob google-cloud-storage
          mlflow server \
            --backend-store-uri $MLFLOW_BACKEND_STORE_URI \
            --default-artifact-root $MLFLOW_DEFAULT_ARTIFACT_ROOT \
            --host $MLFLOW_HOST \
            --port $MLFLOW_PORT \
            --serve-artifacts
        volumeMounts:
        - name: mlflow-artifacts
          mountPath: /mlflow/artifacts
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: mlflow-artifacts
        persistentVolumeClaim:
          claimName: ml-pipeline-artifacts-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mlflow-service
  namespace: ml-pipeline
  labels:
    app: mlflow
    component: tracking
spec:
  selector:
    app: mlflow
  ports:
  - port: 5000
    targetPort: 5000
    name: http
  type: ClusterIP

---
# MLflow UI Service (external access)
apiVersion: v1
kind: Service
metadata:
  name: mlflow-ui
  namespace: ml-pipeline
  labels:
    app: mlflow
    component: ui
spec:
  selector:
    app: mlflow
  ports:
  - port: 80
    targetPort: 5000
    name: http
  type: LoadBalancer

---
# Ingress for MLflow (if using ingress controller)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mlflow-ingress
  namespace: ml-pipeline
  labels:
    app: mlflow
    component: ui
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - mlflow.yourdomain.com
    secretName: mlflow-tls
  rules:
  - host: mlflow.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mlflow-service
            port:
              number: 5000

---
# Horizontal Pod Autoscaler for MLflow
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mlflow-hpa
  namespace: ml-pipeline
  labels:
    app: mlflow
    component: tracking
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mlflow
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 60

---
# Network Policy for MLflow
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mlflow-network-policy
  namespace: ml-pipeline
  labels:
    app: mlflow
    component: tracking
spec:
  podSelector:
    matchLabels:
      app: mlflow
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: ml-pipeline-framework
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 5000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53