apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: ml-pipeline
  labels:
    app: postgres
    component: database
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:14
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres_db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres_password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-db
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-db
        configMap:
          name: postgres-init
          defaultMode: 0755

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: ml-pipeline
  labels:
    app: postgres
    component: database
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: ml-pipeline
  labels:
    app: postgres
    component: database
data:
  init-db.sql: |
    -- Database initialization script for ML Pipeline Framework
    -- Creates necessary databases and tables for MLflow and application data
    
    -- Create MLflow database
    CREATE DATABASE mlflow;
    GRANT ALL PRIVILEGES ON DATABASE mlflow TO mluser;
    
    -- Connect to MLflow database and create tables
    \connect mlflow;
    
    -- Create schema for MLflow tracking
    CREATE SCHEMA IF NOT EXISTS public;
    
    -- Create extensions if needed
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    
    -- Create sample tables for demonstration
    \connect mlpipeline;
    
    -- Create schema for ML pipeline data
    CREATE SCHEMA IF NOT EXISTS ml_data;
    
    -- Sample customer data table
    CREATE TABLE IF NOT EXISTS ml_data.customers (
        customer_id SERIAL PRIMARY KEY,
        age INTEGER,
        income DECIMAL(12,2),
        credit_score INTEGER,
        account_balance DECIMAL(12,2),
        tenure_months INTEGER,
        product_count INTEGER,
        is_active BOOLEAN DEFAULT TRUE,
        churn_flag BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Sample transaction data table
    CREATE TABLE IF NOT EXISTS ml_data.transactions (
        transaction_id SERIAL PRIMARY KEY,
        customer_id INTEGER REFERENCES ml_data.customers(customer_id),
        transaction_date DATE,
        amount DECIMAL(12,2),
        transaction_type VARCHAR(50),
        merchant_category VARCHAR(100),
        is_fraud BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Model metadata table
    CREATE TABLE IF NOT EXISTS ml_data.model_metadata (
        model_id SERIAL PRIMARY KEY,
        model_name VARCHAR(255) NOT NULL,
        version VARCHAR(50),
        algorithm VARCHAR(100),
        framework VARCHAR(50),
        metrics JSONB,
        parameters JSONB,
        training_date TIMESTAMP,
        deployment_date TIMESTAMP,
        status VARCHAR(50) DEFAULT 'training',
        created_by VARCHAR(100),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Model predictions table
    CREATE TABLE IF NOT EXISTS ml_data.predictions (
        prediction_id SERIAL PRIMARY KEY,
        model_id INTEGER REFERENCES ml_data.model_metadata(model_id),
        input_data JSONB,
        prediction JSONB,
        confidence_score DECIMAL(5,4),
        prediction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        batch_id UUID
    );
    
    -- Create indexes for better performance
    CREATE INDEX IF NOT EXISTS idx_customers_churn ON ml_data.customers(churn_flag);
    CREATE INDEX IF NOT EXISTS idx_customers_active ON ml_data.customers(is_active);
    CREATE INDEX IF NOT EXISTS idx_transactions_customer ON ml_data.transactions(customer_id);
    CREATE INDEX IF NOT EXISTS idx_transactions_date ON ml_data.transactions(transaction_date);
    CREATE INDEX IF NOT EXISTS idx_predictions_model ON ml_data.predictions(model_id);
    CREATE INDEX IF NOT EXISTS idx_predictions_date ON ml_data.predictions(prediction_date);
    
    -- Insert sample data for testing
    INSERT INTO ml_data.customers (age, income, credit_score, account_balance, tenure_months, product_count, churn_flag)
    SELECT 
        20 + (random() * 60)::integer as age,
        30000 + (random() * 120000)::decimal(12,2) as income,
        300 + (random() * 550)::integer as credit_score,
        (random() * 50000)::decimal(12,2) as account_balance,
        1 + (random() * 120)::integer as tenure_months,
        1 + (random() * 8)::integer as product_count,
        (random() < 0.15)::boolean as churn_flag
    FROM generate_series(1, 1000);
    
    -- Insert sample transactions
    INSERT INTO ml_data.transactions (customer_id, transaction_date, amount, transaction_type, merchant_category, is_fraud)
    SELECT 
        (random() * 1000 + 1)::integer as customer_id,
        CURRENT_DATE - (random() * 365)::integer as transaction_date,
        (random() * 2000 + 10)::decimal(12,2) as amount,
        CASE (random() * 4)::integer
            WHEN 0 THEN 'purchase'
            WHEN 1 THEN 'withdrawal'
            WHEN 2 THEN 'deposit'
            ELSE 'transfer'
        END as transaction_type,
        CASE (random() * 6)::integer
            WHEN 0 THEN 'grocery'
            WHEN 1 THEN 'gas'
            WHEN 2 THEN 'restaurant'
            WHEN 3 THEN 'retail'
            WHEN 4 THEN 'online'
            ELSE 'other'
        END as merchant_category,
        (random() < 0.02)::boolean as is_fraud
    FROM generate_series(1, 5000);
    
    -- Grant permissions
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA ml_data TO mluser;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA ml_data TO mluser;
    GRANT USAGE ON SCHEMA ml_data TO mluser;
    
    -- Update statistics
    ANALYZE;

---
# PostgreSQL Backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-backup
  namespace: ml-pipeline
  labels:
    app: postgres
    component: backup
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: postgres-backup
            image: postgres:14
            env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres_user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres_password
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres_db
            command:
            - /bin/bash
            - -c
            - |
              set -e
              BACKUP_FILE="/backup/postgres-backup-$(date +%Y%m%d-%H%M%S).sql"
              echo "Creating backup: $BACKUP_FILE"
              pg_dump -h postgres-service -U $POSTGRES_USER -d $POSTGRES_DB > $BACKUP_FILE
              echo "Backup completed successfully"
              
              # Keep only last 7 days of backups
              find /backup -name "postgres-backup-*.sql" -mtime +7 -delete
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: postgres-backup-pvc
          restartPolicy: OnFailure

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-backup-pvc
  namespace: ml-pipeline
  labels:
    app: postgres
    component: backup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi